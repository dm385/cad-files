PAR param;
VAR plugPos, rootId, frame0Inst, frame1Inst, fcEPlug, fcPPlug,
		wcsEPlugFrameLeft, wcsEPlugFrameRight, wcsPPlugFrameLeft, wcsPPlugFrameRight,
		firstRefMateEPlug, firstRefMatePPlug;

IF ISVOID(param) OR ISVOID(param.plugPos) THEN
	plugPos = 2;
ELSE
	plugPos = param.plugPos;
ENDIF

// Load template and set root id
rootId = @BaseModelerAPI_v1.loadFromUrl({
  url: "https://raw.githubusercontent.com/dm385/cad-files/main/fms-roller-assembly/RollerTemplate.ofb",
	fileType: "ofb",
	doClearDrawingAndInitialiseBM: TRUE,
	ident: "RollerAsm"
});

IF LEN(rootId) > 1 THEN
	RETURN;
ENDIF
rootId = rootId[0];

// Get necessary instances
frame0Inst = @AssemblyAPI_v1.getInstance({ ownerId: rootId, name: "Frame0"});
frame1Inst = @AssemblyAPI_v1.getInstance({ ownerId: rootId, name: "Frame1"});

// Get necessary work coord systems
wcsEPlugFrameLeft = @PartAPI_v1.getGeometryByName({ refId: frame0Inst.id, name: "Plug_csys" });
wcsEPlugFrameRight = @PartAPI_v1.getGeometryByName({ refId: frame0Inst.id, name: "Plug2_csys" });
wcsPPlugFrameLeft = @PartAPI_v1.getGeometryByName({ refId: frame0Inst.id, name: "Screw_csys" });
wcsPPlugFrameRight = @PartAPI_v1.getGeometryByName({ refId: frame0Inst.id, name: "Screw2_csys" });

// Get necessary fastened constraints
fcEPlug = @AssemblyAPI_v1.getFastenedConstraint({ refId: rootId, name: "Fastened_ElectricPlug" });
fcPPlug = @AssemblyAPI_v1.getFastenedConstraint({ refId: rootId, name: "Fastened_PneumaticPlug" });

SWITCH plugPos
	CASE 0:
		firstRefMateEPlug = { matePath: [frame0Inst.id], wcsId: wcsEPlugFrameRight, flipType: 4, reorientType: 0 };
		firstRefMatePPlug = { matePath: [frame0Inst.id], wcsId: wcsPPlugFrameRight, flipType: 4, reorientType: 0 };
	CASE 1:
		firstRefMateEPlug = { matePath: [frame0Inst.id], wcsId: wcsEPlugFrameLeft, flipType: 4, reorientType: 0 };
		firstRefMatePPlug = { matePath: [frame0Inst.id], wcsId: wcsPPlugFrameLeft, flipType: 4, reorientType: 0 };
	CASE 2:
		firstRefMateEPlug = { matePath: [frame1Inst.id], wcsId: wcsEPlugFrameRight, flipType: 4, reorientType: 0 };
		firstRefMatePPlug = { matePath: [frame1Inst.id], wcsId: wcsPPlugFrameRight, flipType: 4, reorientType: 0 };
	CASE 3:
		firstRefMateEPlug = { matePath: [frame1Inst.id], wcsId: wcsEPlugFrameLeft, flipType: 4, reorientType: 0 };
		firstRefMatePPlug = { matePath: [frame1Inst.id], wcsId: wcsPPlugFrameLeft, flipType: 4, reorientType: 0 };
	DEFAULT:
		firstRefMateEPlug = { matePath: [frame0Inst.id], wcsId: wcsEPlugFrameRight, flipType: 4, reorientType: 0 };
		firstRefMatePPlug = { matePath: [frame0Inst.id], wcsId: wcsPPlugFrameRight, flipType: 4, reorientType: 0 };
ENDSWITCH

// Update the constraint for electrical and pneumatic plug
fcEPlug["mate1Ref"] = firstRefMateEPlug;
fcPPlug["mate1Ref"] = firstRefMatePPlug;
@AssemblyAPI_v1.fastenedConstraint([fcEPlug, fcPPlug]);
RETURN;