VAR rootId, trayPrt, hipAsm, meshAsm, hipPrt, hipCPrt, deckingPrt, flashingPrt, meshPrt, meshCPrt,
		currHipInstances, currMeshInstances, trayWidth, xDir, yDir,
		HIP_MODULE_SIZE, BEAM_WEB_THICKNESS, MESH_OFFSET, MESH_SECTION_WIDTH, MESH_SPACING;

// Update tray width of all parts (expressions)
PROC UpdateTrayWidth
	PAR lTrayWidth;
	VAR nofHips, leftoverHip, nofMeshes, leftoverMesh, expressions;
	nofHips = div((lTrayWidth - BEAM_WEB_THICKNESS), HIP_MODULE_SIZE);
	leftoverHip = (lTrayWidth - BEAM_WEB_THICKNESS) - (nofHips * HIP_MODULE_SIZE);
	IF ((lTrayWidth + 2 * MESH_OFFSET) > MESH_SECTION_WIDTH) THEN
		nofMeshes = 2;
	ELSE
		nofMeshes = 1;
	ENDIF
	IF (nofMeshes > 1) THEN	// whole mesh plus cutted mesh
		leftoverMesh = lTrayWidth - MESH_SECTION_WIDTH + 2 * MESH_OFFSET + MESH_SPACING;
		expressions = [{
			productId: meshCPrt, toUpdateMembers: [{ name: "Leftover", value: leftoverMesh }]
		}, {
			productId: meshPrt, toUpdateMembers: [{ name: "Section_Width", value: MESH_SECTION_WIDTH}]
		}];
	ELSE	// whole mesh or cutted mesh
		leftoverMesh = lTrayWidth + 2 * MESH_OFFSET;
		expressions = [{
			productId: meshPrt, toUpdateMembers: [{ name: "Section_Width", value: leftoverMesh }]
		}];
	ENDIF
	@PartAPI_v1.updateExpression([
		{ productId: trayPrt, toUpdateMembers: [{ name: "Width", value: lTrayWidth }] },
		{ productId: deckingPrt, toUpdateMembers: [{ name: "TrayWidth", value: lTrayWidth }] },
		{ productId: flashingPrt, toUpdateMembers: [{ name: "TrayWidth", value: lTrayWidth }] },
		{ productId: hipCPrt, toUpdateMembers: [{ name: "Leftover", value: leftoverHip }] }
	]);
	@PartAPI_v1.updateExpression(expressions);
ENDPROC

// Update number of hips depending on tray width
PROC UpdateNofHips
	PAR lTrayWidth;
	VAR nofHips, leftover, nofCurrHipInstances, x, instances, i, tempCurrHipInstances, toRemoveInstances;

  nofHips = div((lTrayWidth - BEAM_WEB_THICKNESS), HIP_MODULE_SIZE);
  leftover = (lTrayWidth - BEAM_WEB_THICKNESS) - (nofHips * HIP_MODULE_SIZE);
  currHipInstances = @AssemblyAPI_v1.getInstance({ ownerId: hipAsm });
  nofCurrHipInstances = LEN(currHipInstances);
  toRemoveInstances = [];

  IF (nofHips < nofCurrHipInstances - 1) THEN	// Remove as many as needed
		tempCurrHipInstances = CADH_CopyArray(currHipInstances);
  	CADH_CutArray(tempCurrHipInstances, nofHips);
  	toRemoveInstances = CADH_Difference(currHipInstances, tempCurrHipInstances);
		@AssemblyAPI_v1.removeInstance(toRemoveInstances);
  ELSIF (nofHips > nofCurrHipInstances - 1) THEN	// Remove only cutted one
		tempCurrHipInstances = CADH_CopyArray(currHipInstances);
  	CADH_CutArray(tempCurrHipInstances, nofCurrHipInstances - 1);
  	toRemoveInstances = CADH_Difference(currHipInstances, tempCurrHipInstances);
		@AssemblyAPI_v1.removeInstance(toRemoveInstances);
  ENDIF
  
	// Add as many as needed, start adding from existing ones
  instances = [];
  IF (nofHips > nofCurrHipInstances - 1) THEN
  	x = (nofCurrHipInstances - 1) * HIP_MODULE_SIZE;
  	FOR i = nofCurrHipInstances TO nofHips DO
  		CADH_InsArray(instances, -1, { productId: hipPrt, ownerId: hipAsm, transformation: [{x,0,0}, xDir, yDir], name: "Hip" + i });
  		x = x + HIP_MODULE_SIZE;
  	NEXT
  	@AssemblyAPI_v1.addInstance(instances);
  ENDIF
  
	// Add the cutted hip instance again, so that it will be at the end of the list
  IF (nofHips != (nofCurrHipInstances - 1)) THEN
  	IF (leftover > 0) THEN
  		@AssemblyAPI_v1.addInstance({
				productId: hipCPrt, ownerId: hipAsm, transformation: [{nofHips * HIP_MODULE_SIZE,0,0}, xDir, yDir], name: "HipC0"
			});
  	ENDIF
  ENDIF
ENDPROC

// Updates the number of meshes depending on the tray width
PROC UpdateNofMeshes
	PAR lTrayWidth;
	VAR nofMeshes, instanceToRemove;
	IF ((lTrayWidth + 2 * MESH_OFFSET) > MESH_SECTION_WIDTH) THEN
		nofMeshes = 2;
	ELSE
		nofMeshes = 1;
	ENDIF
	// If more than one mesh already exists, remove the cutted mesh
	currMeshInstances = @AssemblyAPI_v1.getInstance({ ownerId: meshAsm });
	IF (nofMeshes < 2 AND LEN(currMeshInstances) > 1) THEN
		instanceToRemove = @AssemblyAPI_v1.getInstance({ ownerId: meshAsm, name: "MeshC" });
		@AssemblyAPI_v1.removeInstance(instanceToRemove);
	ENDIF
  IF (nofMeshes > 1 AND LEN(currMeshInstances) < 2) THEN
		currMeshInstances = @AssemblyAPI_v1.addInstance({
			productId: meshCPrt,
			ownerId: meshAsm,
			transformation: [{0,MESH_SECTION_WIDTH - MESH_SPACING,0}, xDir, yDir],
			name: "MeshC"
		});
  ENDIF
ENDPROC

// Load template and set root id
rootId = @BaseModelerAPI_v1.loadFromUrl({
	url: "https://raw.githubusercontent.com/dm385/cad-files/main/tray-assembly/Tray_Assembly_LowTess.ofb",
	fileType: "ofb",
	ident: "TrayAsm"
});
IF LEN(rootId) > 1 THEN
	RETURN;
ENDIF
rootId = rootId[0];
xDir = {1,0,0};
yDir = {0,1,0};

// Parameter
trayWidth = 3620;

// Some constant values for calculations
HIP_MODULE_SIZE = 300;
BEAM_WEB_THICKNESS = 6.9;
MESH_OFFSET = 180;
MESH_SECTION_WIDTH = 2400;
MESH_SPACING = 120;

// Get important parts, assemblies and instances
trayPrt = @AssemblyAPI_v1.getPartTemplate({ name: "Tray" });
hipAsm = @AssemblyAPI_v1.getAssemblyTemplate({ name: "Hip_Assembly" });
meshAsm = @AssemblyAPI_v1.getAssemblyTemplate({ name: "Mesh_Assembly" });
hipPrt = @AssemblyAPI_v1.getPartTemplate({ name: "Hip" });
hipCPrt = @AssemblyAPI_v1.getPartTemplate({ name: "HipC" });
deckingPrt = @AssemblyAPI_v1.getPartTemplate({ name: "Decking" });
flashingPrt = @AssemblyAPI_v1.getPartTemplate({ name: "Flashing" });
meshPrt = @AssemblyAPI_v1.getPartTemplate({ name: "Mesh" });
meshCPrt = @AssemblyAPI_v1.getPartTemplate({ name: "MeshC" });
currHipInstances = @AssemblyAPI_v1.getInstance({ ownerId: hipAsm});
currMeshInstances = @AssemblyAPI_v1.getInstance({ ownerId: meshAsm});

// Update relevant templates and instances
UpdateTrayWidth(trayWidth);
UpdateNofHips(trayWidth);
UpdateNofMeshes(trayWidth);

RETURN;