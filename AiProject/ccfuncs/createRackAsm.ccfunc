PAR param;
VAR distance, res, root, column, shelf, wcsPrt1, wcsPrt2, instances, foc, fc, fc1, fc2, 
dHeight, cwidth, clength, dLength, dDepth, nShelves, i,z, shelfInstances;

IF !ISVOID(param) THEN
  dLength = param.dLength;
	dDepth = param.dDepth;
	dHeight = param.dHeight;
	nShelves = param.nShelves;
 ELSE
 dLength =2000;
 dDepth = 800;
 dHeight = 1500;
 nShelves = 3;
ENDIF

cwidth = 50;
clength = 50;


@CommonAPI.Clear();
root = @AssemblyAPI_v1.createRootAssembly();
//column = @AssemblyAPI_v1.loadProduct({ url: "https://raw.githubusercontent.com/dm385/cad-files/refs/heads/main/AiProject/Column1.ofb", format: "ofb"});
//shelf = @AssemblyAPI_v1.loadProduct({ url: "https://raw.githubusercontent.com/dm385/cad-files/refs/heads/main/AiProject/Shelf1.ofb", format: "ofb"});


column = @AssemblyAPI_v1.loadProduct({file: "C://tmp/Column1.ofb"});
column = column[0];

shelf = @AssemblyAPI_v1.loadProduct({file: "C://tmp/Shelf1.ofb"});
shelf = shelf[0];



wcsPrt1 = @PartAPI_v1.getGeometryByName({refId: column, name: "WCS1"} );

// Update expressions
@PartAPI_v1.updateExpression([{ 
    productId: shelf, toUpdateMembers: [
      { name: "L", value: dLength- cwidth},
      { name: "D", value: dDepth }
    ]
  },
  { 
    productId: column, toUpdateMembers: [
      { name: "H", value: dHeight }
    ]
  }
]);

instances = @AssemblyAPI_v1.addInstance([
  { productId: column, ownerId: root },
  { productId: column, ownerId: root },
  { productId: column, ownerId: root },
  { productId: column, ownerId: root }
]);

z = 30; 
distance = (dHeight -2*z)/(nShelves-1);
shelfInstances = [];
FOR i = 0 TO nShelves -1 DO
  		CADH_InsArray(shelfInstances, -1, { productId: shelf, ownerId: root, transformation: [{cwidth,0,z},{1,0,0}, {0,1,0}], name: "Shelf" + i });
  		z = z + distance;
NEXT
@AssemblyAPI_v1.addInstance(shelfInstances);


foc = @AssemblyAPI_v1.fastenedOriginConstraint({ assemblyId: root, mate1Ref: { matePath: [instances[0]], wcsId: wcsPrt1 } });
fc = @AssemblyAPI_v1.fastenedConstraint({
  assemblyId: root,
  mate1Ref: { matePath: [instances[0]], wcsId: wcsPrt1 },
  mate2Ref: { matePath: [instances[1]], wcsId: wcsPrt1 },
  xOffset: dLength,
  yOffset: 0
});
fc1 = @AssemblyAPI_v1.fastenedConstraint({
  assemblyId: root,
  mate1Ref: { matePath: [instances[0]], wcsId: wcsPrt1 },
  mate2Ref: { matePath: [instances[2]], wcsId: wcsPrt1, reorientType: 2},
  yOffset: dDepth,
  xOffset: clength
});
fc2 = @AssemblyAPI_v1.fastenedConstraint({
  assemblyId: root,
  mate1Ref: { matePath: [instances[3]], wcsId: wcsPrt1 },
  mate2Ref: { matePath: [instances[2]], wcsId: wcsPrt1 },
  xOffset: dLength
});

RETURN;